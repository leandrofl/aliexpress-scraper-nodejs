/**
 * @fileoverview Utilidades auxiliares para o scraping do AliExpress
 * @description M√≥dulo com fun√ß√µes utilit√°rias para manipula√ß√£o de dados, delays,
 * logs, screenshots, manipula√ß√£o de p√°ginas e filtros de busca.
 * Todas as fun√ß√µes incluem tratamento robusto de exce√ß√µes e logging detalhado.
 * 
 * @author Sistema de Scraping AliExpress
 * @version 2.0.0
 * @since 2024-01-01
 */

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import { CONFIG } from '../config.js';

/**
 * Configura√ß√£o de m√≥dulo e paths base
 */
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Executa um delay (pausa) por um tempo fixo especificado
 * @description Utiliza Promise para criar uma pausa n√£o-bloqueante
 * @param {number} ms - Tempo em milissegundos para pausar
 * @returns {Promise<void>} Promise que resolve ap√≥s o tempo especificado
 * @throws {TypeError} Quando ms n√£o √© um n√∫mero v√°lido
 * 
 * @example
 * // Pausar por 2 segundos
 * await delay(2000);
 * 
 * @example
 * // Pausar por 500ms
 * await delay(500);
 */
export const delay = (ms) => {
  try {
    // Valida√ß√£o de entrada
    if (typeof ms !== 'number' || ms < 0 || !isFinite(ms)) {
      throw new TypeError(`Delay: Tempo deve ser um n√∫mero positivo. Recebido: ${ms}`);
    }
    
    // Limite m√°ximo de seguran√ßa (10 minutos)
    const MAX_DELAY = 10 * 60 * 1000;
    if (ms > MAX_DELAY) {
      console.warn(`‚ö†Ô∏è Delay muito longo (${ms}ms), limitando a ${MAX_DELAY}ms`);
      ms = MAX_DELAY;
    }
    
    return new Promise(resolve => setTimeout(resolve, ms));
  } catch (error) {
    console.error(`‚ùå Erro no delay: ${error.message}`);
    // Retorna Promise resolvida imediatamente em caso de erro
    return Promise.resolve();
  }
};

/**
 * Executa um delay aleat√≥rio para simular comportamento humano
 * @description Gera um tempo aleat√≥rio entre 1.2s e 2.5s para evitar detec√ß√£o
 * @returns {Promise<void>} Promise que resolve ap√≥s tempo aleat√≥rio
 * @throws {Error} Em caso de falha na gera√ß√£o do delay
 * 
 * @example
 * // Pausar por tempo aleat√≥rio antes de fazer scraping
 * await randomDelay();
 */
export const randomDelay = async () => {
  try {
    // Configura√ß√£o dos limites (em milissegundos)
    const MIN_DELAY = 1200;  // 1.2 segundos
    const MAX_DELAY = 2500;  // 2.5 segundos
    
    // Gerar tempo aleat√≥rio
    const time = Math.random() * (MAX_DELAY - MIN_DELAY) + MIN_DELAY;
    
    // Garantir que o tempo √© v√°lido
    if (!isFinite(time) || time <= 0) {
      throw new Error(`Tempo aleat√≥rio inv√°lido gerado: ${time}`);
    }
    
    console.log(`‚è≥ Delay aleat√≥rio: ${Math.round(time)}ms`);
    await delay(time);
  } catch (error) {
    console.error(`‚ùå Erro no delay aleat√≥rio: ${error.message}`);
    // Fallback para delay fixo
    console.log(`üîÑ Usando delay fixo de 2000ms como fallback`);
    await delay(2000);
  }
};

/**
 * Faz scroll na p√°gina at√© carregar todos os produtos dispon√≠veis
 * @description Utiliza estrat√©gia de scroll inteligente com detec√ß√£o de fim de resultados
 * e contagem est√°vel de produtos para determinar quando parar
 * 
 * @param {Page} page - Inst√¢ncia do Puppeteer Page
 * @param {number} [maxAttempts=2] - M√°ximo de tentativas com contagem est√°vel
 * @param {number} [intervalo=500] - Intervalo entre scrolls em milissegundos
 * @returns {Promise<number>} N√∫mero total de produtos encontrados
 * @throws {Error} Em caso de falha no processo de scroll
 * 
 * @example
 * // Scroll b√°sico
 * const totalProdutos = await scrollUntilAllProductsLoaded(page);
 * 
 * @example
 * // Scroll com par√¢metros personalizados
 * const totalProdutos = await scrollUntilAllProductsLoaded(page, 3, 800);
 */
export async function scrollUntilAllProductsLoaded(page, maxAttempts = 2, intervalo = 500) {
  try {
    // Valida√ß√£o de par√¢metros
    if (!page || typeof page.evaluate !== 'function') {
      throw new Error('P√°gina Puppeteer inv√°lida fornecida');
    }
    
    if (typeof maxAttempts !== 'number' || maxAttempts <= 0) {
      console.warn(`‚ö†Ô∏è maxAttempts inv√°lido (${maxAttempts}), usando valor padr√£o: 2`);
      maxAttempts = 2;
    }
    
    if (typeof intervalo !== 'number' || intervalo <= 0) {
      console.warn(`‚ö†Ô∏è Intervalo inv√°lido (${intervalo}), usando valor padr√£o: 500ms`);
      intervalo = 500;
    }
    
    // Vari√°veis de controle
    let previousCount = 0;
    let stableAttempts = 0;
    let scrollAttempts = 0;
    const MAX_SCROLL_ATTEMPTS = 50; // Limite m√°ximo de scrolls para evitar loop infinito
    
    console.log(`üîÑ Iniciando scroll autom√°tico (m√°x ${maxAttempts} verifica√ß√µes est√°veis)`);
    
    while (stableAttempts < maxAttempts && scrollAttempts < MAX_SCROLL_ATTEMPTS) {
      try {
        scrollAttempts++;
        
        // Contar produtos atuais
        const elementos = await page.$$(`a.search-card-item`);
        const currentCount = elementos ? elementos.length : 0;
        
        // Verificar se chegou ao fim dos resultados
        const fimResultados = await page.$(`.comet-pagination__no-more`);
        const fimVisivel = fimResultados ? await fimResultados.isIntersectingViewport() : false;
        
        // Log de progresso a cada 10 scrolls
        if (scrollAttempts % 10 === 0) {
          console.log(`üìä Scroll ${scrollAttempts}: ${currentCount} produtos encontrados`);
        }
        
        // Verificar estabilidade da contagem
        if (currentCount === previousCount) {
          stableAttempts++;
          console.log(`‚è∏Ô∏è Contagem est√°vel ${stableAttempts}/${maxAttempts}: ${currentCount} produtos`);
        } else {
          stableAttempts = 0; // Reset contador se a contagem mudou
        }
        
        // Condi√ß√µes de parada
        if (fimVisivel && currentCount === previousCount) {
          console.log(`üèÅ Fim dos resultados detectado com ${currentCount} produtos`);
          break;
        }
        
        // Executar scroll
        await page.evaluate(() => {
          window.scrollBy(0, window.innerHeight);
        });
        
        // Aguardar carregamento
        await delay(intervalo);
        previousCount = currentCount;
        
      } catch (scrollError) {
        console.error(`‚ö†Ô∏è Erro durante scroll ${scrollAttempts}: ${scrollError.message}`);
        // Continuar tentando outros scrolls
        continue;
      }
    }
    
    // Resultado final
    const finalCount = previousCount;
    
    if (scrollAttempts >= MAX_SCROLL_ATTEMPTS) {
      console.warn(`‚ö†Ô∏è Atingido limite m√°ximo de scrolls (${MAX_SCROLL_ATTEMPTS})`);
    }
    
    console.log(`‚úÖ Scroll conclu√≠do: ${finalCount} produtos carregados em ${scrollAttempts} tentativas`);
    return finalCount;
    
  } catch (error) {
    console.error(`‚ùå Erro cr√≠tico no scroll autom√°tico: ${error.message}`);
    console.error(`üìç Stack trace:`, error.stack);
    
    // Tentar obter contagem atual mesmo com erro
    try {
      const elementos = await page.$$(`a.search-card-item`);
      const currentCount = elementos ? elementos.length : 0;
      console.log(`üîÑ Retornando contagem atual apesar do erro: ${currentCount} produtos`);
      return currentCount;
    } catch (fallbackError) {
      console.error(`‚ùå Falha tamb√©m no fallback de contagem: ${fallbackError.message}`);
      return 0;
    }
  }
}

/**
 * Converte string em slug amig√°vel para URLs e nomes de arquivo
 * @description Remove acentos, caracteres especiais e normaliza texto para uso seguro
 * @param {string} str - String para converter em slug
 * @returns {string} String convertida em slug (min√∫sculas, h√≠fens, sem acentos)
 * @throws {TypeError} Quando entrada n√£o √© uma string v√°lida
 * 
 * @example
 * slugify("Eletr√¥nicos & Gadgets"); // "eletronicos-gadgets"
 * 
 * @example
 * slugify("Roupas Masculinas!!!"); // "roupas-masculinas"
 */
export const slugify = (str) => {
  try {
    // Valida√ß√£o de entrada
    if (typeof str !== 'string') {
      console.warn(`‚ö†Ô∏è Slugify: Entrada inv√°lida (${typeof str}), convertendo para string`);
      str = String(str || '');
    }
    
    if (str.length === 0) {
      console.warn(`‚ö†Ô∏è Slugify: String vazia fornecida`);
      return 'sem-nome';
    }
    
    // Processo de limpeza e normaliza√ß√£o
    const resultado = str
      .normalize('NFD')                    // Normalizar acentos
      .replace(/[\u0300-\u036f]/g, '')    // Remover diacr√≠ticos
      .replace(/\s+/g, '-')               // Espa√ßos ‚Üí h√≠fens
      .replace(/[^\w\-]+/g, '')           // Remover caracteres especiais
      .replace(/\-\-+/g, '-')             // M√∫ltiplos h√≠fens ‚Üí √∫nico h√≠fen
      .replace(/^-+/, '')                 // Remover h√≠fens no in√≠cio
      .replace(/-+$/, '')                 // Remover h√≠fens no final
      .toLowerCase();                     // Converter para min√∫sculas
    
    // Validar resultado
    if (resultado.length === 0) {
      console.warn(`‚ö†Ô∏è Slugify resultou em string vazia para: "${str}"`);
      return 'item-sem-nome';
    }
    
    // Limite de tamanho para evitar nomes muito longos
    const MAX_SLUG_LENGTH = 100;
    if (resultado.length > MAX_SLUG_LENGTH) {
      const slugTruncado = resultado.substring(0, MAX_SLUG_LENGTH).replace(/-+$/, '');
      console.debug?.(`üìè Slug truncado de ${resultado.length} para ${slugTruncado.length} caracteres`);
      return slugTruncado;
    }
    
    return resultado;
    
  } catch (error) {
    console.error(`‚ùå Erro ao gerar slug para "${str}": ${error.message}`);
    // Fallback seguro
    return 'erro-slug-' + Date.now();
  }
};

/**
 * Faz parsing de string de pre√ßo para n√∫mero decimal
 * @description Extrai valor num√©rico de strings de pre√ßo em diversos formatos
 * @param {string} str - String contendo pre√ßo (ex: "R$ 15,90", "$29.99", "123,45")
 * @returns {number|null} Valor num√©rico ou null se parsing falhar
 * 
 * @example
 * parsePrice("R$ 15,90"); // 15.90
 * 
 * @example
 * parsePrice("$29.99"); // 29.99
 * 
 * @example
 * parsePrice("invalid"); // null
 */
export function parsePrice(str) {
  try {
    // Valida√ß√£o de entrada
    if (typeof str !== 'string') {
      console.warn(`‚ö†Ô∏è ParsePrice: Entrada inv√°lida (${typeof str}), convertendo para string`);
      str = String(str || '');
    }
    
    if (str.length === 0) {
      console.warn(`‚ö†Ô∏è ParsePrice: String vazia fornecida`);
      return null;
    }
    
    // Logging detalhado para debug
    console.log(`üîç Fazendo parse do pre√ßo: "${str}"`);
    
    // Remover caracteres n√£o num√©ricos, mantendo v√≠rgulas e pontos
    const clean = str.replace(/[^\d,.]/g, '');
    
    if (clean.length === 0) {
      console.warn(`‚ö†Ô∏è ParsePrice: Nenhum d√≠gito encontrado em "${str}"`);
      return null;
    }
    
    // Lidar com diferentes formatos de decimal
    let numerico;
    
    // Formato brasileiro (v√≠rgula como decimal): "1.234,56"
    if (clean.includes(',') && clean.lastIndexOf(',') > clean.lastIndexOf('.')) {
      numerico = clean.replace(/\./g, '').replace(',', '.');
    }
    // Formato americano (ponto como decimal): "1,234.56"
    else if (clean.includes('.')) {
      // Se tem v√≠rgula antes do √∫ltimo ponto, remover v√≠rgulas
      if (clean.includes(',') && clean.lastIndexOf(',') < clean.lastIndexOf('.')) {
        numerico = clean.replace(/,/g, '');
      } else {
        numerico = clean;
      }
    }
    // Apenas v√≠rgula (formato brasileiro): "1234,56"
    else if (clean.includes(',')) {
      numerico = clean.replace(',', '.');
    }
    // Apenas n√∫meros: "1234"
    else {
      numerico = clean;
    }
    
    const resultado = parseFloat(numerico);
    
    // Valida√ß√£o do resultado
    if (isNaN(resultado) || !isFinite(resultado)) {
      console.warn(`‚ö†Ô∏è ParsePrice: Resultado inv√°lido para "${str}" ‚Üí "${numerico}" ‚Üí ${resultado}`);
      return null;
    }
    
    if (resultado < 0) {
      console.warn(`‚ö†Ô∏è ParsePrice: Pre√ßo negativo detectado: ${resultado}`);
      return null;
    }
    
    // Limite m√°ximo razo√°vel para pre√ßos (R$ 1 milh√£o)
    const MAX_PRICE = 1000000;
    if (resultado > MAX_PRICE) {
      console.warn(`‚ö†Ô∏è ParsePrice: Pre√ßo muito alto (${resultado}), pode ser erro de parsing`);
    }
    
    console.log(`‚úÖ Parse de pre√ßo bem-sucedido: "${str}" ‚Üí ${resultado}`);
    return resultado;
    
  } catch (error) {
    console.error(`‚ùå Erro no parsing de pre√ßo para "${str}": ${error.message}`);
    return null;
  }
}

/**
 * Remove tags HTML e normaliza espa√ßos em branco de um texto
 * @description Limpa texto removendo quebras de linha, m√∫ltiplos espa√ßos e tags HTML
 * @param {string} texto - Texto para limpar
 * @returns {string} Texto limpo e normalizado
 * 
 * @example
 * limparTexto("  <p>Hello\n\n  World</p>  "); // "Hello World"
 */
export const limparTexto = (texto) => {
  try {
    if (typeof texto !== 'string') {
      console.warn(`‚ö†Ô∏è LimparTexto: Entrada inv√°lida (${typeof texto}), convertendo para string`);
      texto = String(texto || '');
    }
    
    if (texto.length === 0) {
      return '';
    }
    
    // Processo de limpeza
    const resultado = texto
      .replace(/<[^>]*>/g, '')        // Remover tags HTML
      .replace(/\s+/g, ' ')           // M√∫ltiplos espa√ßos ‚Üí espa√ßo √∫nico
      .replace(/[\n\r]+/g, '')        // Remover quebras de linha
      .trim();                        // Remover espa√ßos nas bordas
    
    return resultado;
    
  } catch (error) {
    console.error(`‚ùå Erro ao limpar texto: ${error.message}`);
    return String(texto || '');
  }
};

/**
 * Formata valor num√©rico como moeda brasileira (BRL)
 * @description Converte n√∫mero para formato de moeda brasileira com s√≠mbolo R$
 * @param {number|string} valor - Valor para formatar
 * @returns {string} Valor formatado como moeda ou string original se n√£o for n√∫mero
 * 
 * @example
 * formatarMoeda(15.90); // "R$ 15,90"
 * 
 * @example
 * formatarMoeda("invalid"); // "invalid"
 */
export const formatarMoeda = (valor) => {
  try {
    // Se j√° √© string e n√£o um n√∫mero, retornar como est√°
    if (typeof valor === 'string' && isNaN(parseFloat(valor))) {
      return valor;
    }
    
    // Converter para n√∫mero se necess√°rio
    const numero = typeof valor === 'number' ? valor : parseFloat(valor);
    
    // Validar n√∫mero
    if (isNaN(numero) || !isFinite(numero)) {
      console.warn(`‚ö†Ô∏è FormatarMoeda: Valor inv√°lido (${valor}), retornando original`);
      return valor;
    }
    
    // Formatar como moeda brasileira
    return numero.toLocaleString('pt-BR', { 
      style: 'currency', 
      currency: 'BRL',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
    
  } catch (error) {
    console.error(`‚ùå Erro ao formatar moeda para ${valor}: ${error.message}`);
    return String(valor);
  }
};

/**
 * Sistema de logging estruturado com diferentes n√≠veis
 */

/**
 * Log de informa√ß√£o geral
 * @param {string} msg - Mensagem para logar
 * @param {Object} [detalhes] - Detalhes adicionais opcionais
 */
export const logInfo = (msg, detalhes = null) => {
  try {
    const timestamp = new Date().toISOString();
    console.log(`‚ÑπÔ∏è  [${timestamp}] ${msg}`);
    if (detalhes) {
      console.log(`üìã Detalhes:`, detalhes);
    }
  } catch (error) {
    console.log(`‚ÑπÔ∏è  ${msg}`); // Fallback simples
  }
};

/**
 * Log de sucesso/confirma√ß√£o
 * @param {string} msg - Mensagem de sucesso para logar
 * @param {Object} [detalhes] - Detalhes adicionais opcionais
 */
export const logSucesso = (msg, detalhes = null) => {
  try {
    const timestamp = new Date().toISOString();
    console.log(`‚úÖ [${timestamp}] ${msg}`);
    if (detalhes) {
      console.log(`üìã Detalhes:`, detalhes);
    }
  } catch (error) {
    console.log(`‚úÖ ${msg}`); // Fallback simples
  }
};

/**
 * Log de erro com stack trace opcional
 * @param {string} msg - Mensagem de erro para logar
 * @param {Error|Object} [erro] - Objeto de erro ou detalhes adicionais
 */
export const logErro = (msg, erro = null) => {
  try {
    const timestamp = new Date().toISOString();
    console.log(`‚ùå [${timestamp}] ${msg}`);
    
    if (erro) {
      if (erro instanceof Error) {
        console.error(`üìç Stack trace:`, erro.stack);
      } else {
        console.log(`üìã Detalhes do erro:`, erro);
      }
    }
  } catch (error) {
    console.log(`‚ùå ${msg}`); // Fallback simples
  }
};

/**
 * Log de aviso/warning
 * @param {string} msg - Mensagem de aviso para logar
 * @param {Object} [detalhes] - Detalhes adicionais opcional
 */
export const logAviso = (msg, detalhes = null) => {
  try {
    const timestamp = new Date().toISOString();
    console.log(`‚ö†Ô∏è [${timestamp}] ${msg}`);
    
    if (detalhes) {
      console.log(`üìã Detalhes:`, detalhes);
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è ${msg}`); // Fallback simples
  }
};

/**
 * Captura screenshot da p√°gina atual e salva no diret√≥rio de debug
 * @description Gera screenshot com nome √∫nico baseado em categoria, p√°gina e timestamp
 * @param {Page} page - Inst√¢ncia do Puppeteer Page
 * @param {string} categoria - Nome da categoria sendo processada
 * @param {number} pagina - N√∫mero da p√°gina atual
 * @param {boolean} [fullPage=true] - Se deve capturar p√°gina completa
 * @returns {Promise<string|null>} Caminho do arquivo salvo ou null em caso de erro
 * @throws {Error} Em caso de falha na captura ou salvamento
 * 
 * @example
 * const screenshot = await tirarScreenshot(page, "eletronicos", 1);
 * 
 * @example
 * const screenshot = await tirarScreenshot(page, "roupas", 2, false);
 */
export async function tirarScreenshot(page, categoria, pagina, fullPage = true) {
  try {
    // Valida√ß√£o de par√¢metros
    if (!page || typeof page.screenshot !== 'function') {
      throw new Error('P√°gina Puppeteer inv√°lida fornecida para screenshot');
    }
    
    if (typeof categoria !== 'string' || categoria.length === 0) {
      console.warn(`‚ö†Ô∏è Categoria inv√°lida para screenshot, usando "sem-categoria"`);
      categoria = 'sem-categoria';
    }
    
    if (typeof pagina !== 'number' || pagina < 0) {
      console.warn(`‚ö†Ô∏è N√∫mero de p√°gina inv√°lido (${pagina}), usando 0`);
      pagina = 0;
    }
    
    // Verificar se diret√≥rio de debug est√° configurado
    if (!CONFIG?.general?.debugDir) {
      throw new Error('Diret√≥rio de debug n√£o configurado em CONFIG.general.debugDir');
    }
    
    // Garantir que diret√≥rio existe
    await fs.ensureDir(CONFIG.general.debugDir);
    
    // Gerar nome √∫nico do arquivo
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '_');
    const categoriaNormalizada = slugify(categoria);
    const nomeArquivo = `screenshot_${categoriaNormalizada}_p${pagina}_${timestamp}.png`;
    const caminho = path.join(CONFIG.general.debugDir, nomeArquivo);
    
    logInfo(`üì∏ Capturando screenshot: ${nomeArquivo}`);
    
    // Configura√ß√µes de screenshot
    const opcoes = {
      path: caminho,
      fullPage: Boolean(fullPage),
      quality: 90, // Para screenshots JPEG
      type: 'png'  // Manter PNG para melhor qualidade
    };
    
    // Capturar screenshot
    await page.screenshot(opcoes);
    
    // Verificar se arquivo foi criado
    const arquivoExiste = await fs.pathExists(caminho);
    if (!arquivoExiste) {
      throw new Error(`Screenshot n√£o foi salvo corretamente em ${caminho}`);
    }
    
    // Verificar tamanho do arquivo
    const stats = await fs.stat(caminho);
    const tamanhoKB = Math.round(stats.size / 1024);
    
    logSucesso(`Screenshot salvo: ${path.basename(caminho)} (${tamanhoKB}KB)`);
    return caminho;
    
  } catch (error) {
    logErro(`Erro ao salvar screenshot para categoria "${categoria}", p√°gina ${pagina}`, error);
    return null;
  }
}

/**
 * Salva dados JSON de produto no diret√≥rio de debug
 * @description Salva objeto JavaScript como arquivo JSON formatado
 * @param {Object} json - Dados do produto para salvar
 * @param {string} categoria - Nome da categoria
 * @param {number} pagina - N√∫mero da p√°gina
 * @returns {Promise<string|null>} Caminho do arquivo salvo ou null em caso de erro
 * @throws {Error} Em caso de falha no salvamento
 * 
 * @example
 * await salvarJsonProduto(dadosProduto, "eletronicos", 1);
 */
export async function salvarJsonProduto(json, categoria, pagina) {
  try {
    // Valida√ß√£o de par√¢metros
    if (!json || typeof json !== 'object') {
      throw new Error('Dados JSON inv√°lidos fornecidos');
    }
    
    if (typeof categoria !== 'string' || categoria.length === 0) {
      console.warn(`‚ö†Ô∏è Categoria inv√°lida para JSON, usando "sem-categoria"`);
      categoria = 'sem-categoria';
    }
    
    if (typeof pagina !== 'number' || pagina < 0) {
      console.warn(`‚ö†Ô∏è N√∫mero de p√°gina inv√°lido (${pagina}), usando 0`);
      pagina = 0;
    }
    
    // Verificar configura√ß√£o
    if (!CONFIG?.general?.debugDir) {
      throw new Error('Diret√≥rio de debug n√£o configurado');
    }
    
    // Garantir que diret√≥rio existe
    await fs.ensureDir(CONFIG.general.debugDir);
    
    // Gerar nome do arquivo
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '_');
    const categoriaNormalizada = slugify(categoria);
    const nome = `json_${categoriaNormalizada}_p${pagina}_${timestamp}.json`;
    const caminho = path.join(CONFIG.general.debugDir, nome);
    
    logInfo(`üíæ Salvando dados JSON: ${nome}`);
    
    // Adicionar metadados ao JSON
    const jsonComMetadados = {
      metadata: {
        categoria,
        pagina,
        timestamp: new Date().toISOString(),
        versao: '2.0.0'
      },
      dados: json
    };
    
    // Salvar arquivo com formata√ß√£o
    await fs.writeJson(caminho, jsonComMetadados, { 
      spaces: 2,
      encoding: 'utf8'
    });
    
    // Verificar salvamento
    const arquivoExiste = await fs.pathExists(caminho);
    if (!arquivoExiste) {
      throw new Error(`Arquivo JSON n√£o foi salvo corretamente`);
    }
    
    // Verificar tamanho
    const stats = await fs.stat(caminho);
    const tamanhoKB = Math.round(stats.size / 1024);
    
    logSucesso(`Dados JSON salvos: ${path.basename(caminho)} (${tamanhoKB}KB)`);
    return caminho;
    
  } catch (error) {
    logErro(`Erro ao salvar JSON para categoria "${categoria}", p√°gina ${pagina}`, error);
    return null;
  }
}

/**
 * Salva HTML completo da p√°gina de pesquisa para debug
 * @description Captura e salva o HTML da p√°gina atual para an√°lise posterior
 * @param {Page} page - Inst√¢ncia do Puppeteer Page
 * @param {string} categoria - Nome da categoria
 * @param {number} pagina - N√∫mero da p√°gina
 * @returns {Promise<string|null>} Caminho do arquivo salvo ou null em caso de erro
 * @throws {Error} Em caso de falha na captura ou salvamento
 * 
 * @example
 * await salvarHtmlPesquisa(page, "eletronicos", 1);
 */
export async function salvarHtmlPesquisa(page, categoria, pagina) {
  try {
    // Valida√ß√£o de par√¢metros
    if (!page || typeof page.content !== 'function') {
      throw new Error('P√°gina Puppeteer inv√°lida fornecida para captura HTML');
    }
    
    if (typeof categoria !== 'string' || categoria.length === 0) {
      console.warn(`‚ö†Ô∏è Categoria inv√°lida para HTML, usando "sem-categoria"`);
      categoria = 'sem-categoria';
    }
    
    if (typeof pagina !== 'number' || pagina < 0) {
      console.warn(`‚ö†Ô∏è N√∫mero de p√°gina inv√°lido (${pagina}), usando 0`);
      pagina = 0;
    }
    
    // Verificar configura√ß√£o
    if (!CONFIG?.general?.debugDir) {
      throw new Error('Diret√≥rio de debug n√£o configurado');
    }
    
    // Garantir que diret√≥rio existe
    await fs.ensureDir(CONFIG.general.debugDir);
    
    // Gerar nome do arquivo
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '_');
    const categoriaNormalizada = slugify(categoria);
    const nome = `html_${categoriaNormalizada}_p${pagina}_${timestamp}.html`;
    const caminho = path.join(CONFIG.general.debugDir, nome);
    
    logInfo(`üìÑ Capturando HTML da p√°gina: ${nome}`);
    
    // Capturar HTML da p√°gina
    const html = await page.content();
    
    if (!html || html.length === 0) {
      throw new Error('HTML capturado est√° vazio');
    }
    
    // Adicionar coment√°rios de metadados no HTML
    const htmlComMetadados = `<!-- 
Captura HTML - Sistema de Scraping AliExpress
Categoria: ${categoria}
P√°gina: ${pagina}
Timestamp: ${new Date().toISOString()}
URL: ${page.url()}
Tamanho: ${html.length} caracteres
-->

${html}`;
    
    // Salvar arquivo
    await fs.writeFile(caminho, htmlComMetadados, 'utf-8');
    
    // Verificar salvamento
    const arquivoExiste = await fs.pathExists(caminho);
    if (!arquivoExiste) {
      throw new Error(`Arquivo HTML n√£o foi salvo corretamente`);
    }
    
    // Verificar tamanho
    const stats = await fs.stat(caminho);
    const tamanhoKB = Math.round(stats.size / 1024);
    
    logSucesso(`HTML salvo: ${path.basename(caminho)} (${tamanhoKB}KB)`);
    return caminho;
    
  } catch (error) {
    logErro(`Erro ao salvar HTML para categoria "${categoria}", p√°gina ${pagina}`, error);
    return null;
  }
}

/**
 * Aplica filtro de ordena√ß√£o por "Mais Vendidos" na p√°gina de resultados
 * @description Tenta m√∫ltiplas estrat√©gias para encontrar e aplicar o filtro de mais vendidos
 * no AliExpress, incluindo seletores CSS, busca por texto e fallbacks robustos
 * 
 * @param {Page} page - Inst√¢ncia do Puppeteer Page
 * @returns {Promise<boolean>} true se filtro foi aplicado com sucesso, false caso contr√°rio
 * @throws {Error} Em caso de erro cr√≠tico na aplica√ß√£o do filtro
 * 
 * @example
 * const filtroAplicado = await filtrarPorMaisVendidos(page);
 * if (filtroAplicado) {
 *   console.log("Produtos ordenados por mais vendidos");
 * }
 */
export async function filtrarPorMaisVendidos(page) {
  try {
    // Valida√ß√£o de par√¢metros
    if (!page || typeof page.evaluate !== 'function') {
      throw new Error('P√°gina Puppeteer inv√°lida fornecida para filtro');
    }
    
    logInfo('üîç Iniciando aplica√ß√£o de filtro "Mais Vendidos"...');
    
    // Aguardar carregamento completo da p√°gina
    await delay(2000);
    
    // Verificar se p√°gina carregou corretamente
    const url = page.url();
    logInfo(`üìç URL atual: ${url}`);
    
    if (!url.includes('aliexpress')) {
      console.warn(`‚ö†Ô∏è URL n√£o parece ser do AliExpress: ${url}`);
    }
    
    // Estrat√©gia 1: Seletores CSS espec√≠ficos para ordena√ß√£o
    const seletoresOrdenacao = [
      // Seletores mais espec√≠ficos primeiro
      'div[ae_object_value="number_of_orders"]',
      '[data-spm-anchor-id*="order"]',
      'div[title*="Mais vendido"]',
      'div[title*="mais vendido"]',
      'div[title*="vendidos"]',
      '.comet-select-dropdown-item[data-value*="order"]',
      '.search-sort-by .comet-select',
      '.search-sort .comet-select',
      // Seletores mais gen√©ricos
      '.sort-by-selector',
      '.sort-dropdown',
      '[data-testid*="sort"]'
    ];
    
    let filtroEncontrado = false;
    let tentativasRealizadas = 0;
    
    // Tentar cada seletor CSS
    for (const [index, seletor] of seletoresOrdenacao.entries()) {
      try {
        tentativasRealizadas++;
        logInfo(`üîç Tentativa ${tentativasRealizadas}: Testando seletor "${seletor}"`);
        
        // Procurar elementos que correspondem ao seletor
        const elementos = await page.$$(seletor);
        
        if (elementos && elementos.length > 0) {
          logInfo(`‚úÖ Encontrados ${elementos.length} elemento(s) com seletor: ${seletor}`);
          
          // Tentar clicar no primeiro elemento encontrado
          const elemento = elementos[0];
          
          // Verificar se elemento est√° vis√≠vel
          const isVisible = await elemento.isIntersectingViewport();
          if (!isVisible) {
            logInfo(`‚ö†Ô∏è Elemento n√£o est√° vis√≠vel, tentando fazer scroll`);
            await elemento.scrollIntoView();
            await delay(1000);
          }
          
          // Tentar clicar
          await elemento.click();
          await delay(1500);
          
          logSucesso(`‚úÖ Clique realizado no seletor: ${seletor}`);
          
          // Estrat√©gia 1.1: Procurar op√ß√µes de dropdown ap√≥s clicar
          const opcoesMaisVendidos = [
            'div[ae_object_value="number_of_orders"]',
            'div[title*="Mais vendido"]',
            'div[title*="mais vendido"]',
            'div[title*="vendidos"]',
            '.comet-select-dropdown-item[data-value*="order"]',
            '[data-value="number_of_orders"]'
          ];
          
          for (const opcaoSeletor of opcoesMaisVendidos) {
            try {
              const elementoOpcao = await page.$(opcaoSeletor);
              if (elementoOpcao) {
                const isOpcaoVisible = await elementoOpcao.isIntersectingViewport();
                if (isOpcaoVisible) {
                  await elementoOpcao.click();
                  await delay(2000);
                  logSucesso(`‚úÖ Op√ß√£o "Mais vendidos" selecionada: ${opcaoSeletor}`);
                  filtroEncontrado = true;
                  break;
                }
              }
            } catch (opcaoError) {
              // Continuar tentando outras op√ß√µes
              continue;
            }
          }
          
          if (filtroEncontrado) break;
        }
        
      } catch (seletorError) {
        logInfo(`‚ö†Ô∏è Erro com seletor "${seletor}": ${seletorError.message}`);
        // Continuar tentando outros seletores
        continue;
      }
    }
    
    // Estrat√©gia 2: Busca por texto na p√°gina
    if (!filtroEncontrado) {
      logInfo('üîç Tentando estrat√©gia de busca por texto...');
      
      try {
        const textoEncontrado = await page.evaluate(() => {
          // Procurar por elementos que contenham texto relacionado a "mais vendidos"
          const textosParaBuscar = [
            'Mais vendido',
            'mais vendido',
            'Vendidos',
            'vendidos',
            'Orders',
            'orders',
            'Best selling',
            'best selling'
          ];
          
          const todosElementos = Array.from(document.querySelectorAll('*'));
          
          for (const texto of textosParaBuscar) {
            const elemento = todosElementos.find(el => 
              el.textContent && 
              el.textContent.trim().includes(texto) &&
              el.offsetParent !== null // Verificar se est√° vis√≠vel
            );
            
            if (elemento && elemento.click) {
              try {
                elemento.click();
                return { sucesso: true, texto, tagName: elemento.tagName };
              } catch (e) {
                continue;
              }
            }
          }
          
          return { sucesso: false };
        });
        
        if (textoEncontrado.sucesso) {
          await delay(3000); // Aguardar mais tempo para recarregamento
          logSucesso(`‚úÖ Filtro aplicado via busca por texto: "${textoEncontrado.texto}" em ${textoEncontrado.tagName}`);
          filtroEncontrado = true;
        }
        
      } catch (textoError) {
        logErro(`Erro na estrat√©gia de busca por texto`, textoError);
      }
    }
    
    // Estrat√©gia 3: Interceptar requests de ordena√ß√£o (fallback avan√ßado)
    if (!filtroEncontrado) {
      logInfo('üîç Tentando estrat√©gia de intercepta√ß√£o de requests...');
      
      try {
        // Tentar manipular URL diretamente adicionando par√¢metro de ordena√ß√£o
        const urlAtual = page.url();
        if (urlAtual.includes('aliexpress')) {
          let novaUrl = urlAtual;
          
          // Adicionar par√¢metro de ordena√ß√£o se n√£o existir
          if (!urlAtual.includes('SortType=')) {
            const separador = urlAtual.includes('?') ? '&' : '?';
            novaUrl = `${urlAtual}${separador}SortType=total_tranpro_desc`;
            
            logInfo(`üîÑ Tentando navegar para URL com ordena√ß√£o: ${novaUrl}`);
            await page.goto(novaUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await delay(3000);
            
            logSucesso(`‚úÖ Navega√ß√£o para URL com par√¢metro de ordena√ß√£o conclu√≠da`);
            filtroEncontrado = true;
          }
        }
        
      } catch (urlError) {
        logErro(`Erro na estrat√©gia de URL`, urlError);
      }
    }
    
    // Verifica√ß√£o final e logging detalhado
    if (filtroEncontrado) {
      await delay(3000); // Aguardar carregamento dos resultados filtrados
      
      // Verificar se a ordena√ß√£o realmente funcionou
      try {
        const produtosCarregados = await page.$$('a.search-card-item');
        const quantidadeProdutos = produtosCarregados ? produtosCarregados.length : 0;
        
        logSucesso(`üéØ Filtro "Mais Vendidos" aplicado com sucesso!`);
        logInfo(`üìä ${quantidadeProdutos} produtos carregados ap√≥s aplica√ß√£o do filtro`);
        logInfo(`üìç URL final: ${page.url()}`);
        
        return true;
        
      } catch (verificacaoError) {
        logErro(`Erro na verifica√ß√£o final do filtro`, verificacaoError);
        return true; // Ainda considerar sucesso se chegou at√© aqui
      }
    } else {
      logErro(`‚ö†Ô∏è N√£o foi poss√≠vel aplicar o filtro "Mais Vendidos" ap√≥s ${tentativasRealizadas} tentativas`);
      logInfo(`üìç URL quando falhou: ${page.url()}`);
      
      // Log de debug adicional
      try {
        const elementosEncontrados = await page.evaluate(() => {
          const selectores = document.querySelectorAll('.comet-select, .sort-by, [class*="sort"]');
          return Array.from(selectores).map(el => ({
            tagName: el.tagName,
            className: el.className,
            textContent: el.textContent?.slice(0, 50)
          }));
        });
        
        if (elementosEncontrados.length > 0) {
          logInfo(`üîç Elementos relacionados a ordena√ß√£o encontrados:`, elementosEncontrados);
        }
      } catch (debugError) {
        // Ignorar erros de debug
      }
      
      return false;
    }
    
  } catch (error) {
    logErro(`‚ùå Erro cr√≠tico ao aplicar filtro "Mais Vendidos"`, error);
    
    // Tentar continuar mesmo com erro
    try {
      const url = page.url();
      logInfo(`üìç URL durante erro: ${url}`);
    } catch (urlError) {
      logErro(`N√£o foi poss√≠vel obter URL durante erro`, urlError);
    }
    
    return false;
  }
}
